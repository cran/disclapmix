// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// disclapglm_linkfun
NumericVector disclapglm_linkfun(NumericVector mu);
RcppExport SEXP disclapmix_disclapglm_linkfun(SEXP muSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        NumericVector mu = Rcpp::as<NumericVector >(muSEXP);
        NumericVector __result = disclapglm_linkfun(mu);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// disclapglm_linkinv
NumericVector disclapglm_linkinv(NumericVector eta);
RcppExport SEXP disclapmix_disclapglm_linkinv(SEXP etaSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        NumericVector eta = Rcpp::as<NumericVector >(etaSEXP);
        NumericVector __result = disclapglm_linkinv(eta);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// disclapglm_mu_eta
NumericVector disclapglm_mu_eta(NumericVector eta);
RcppExport SEXP disclapmix_disclapglm_mu_eta(SEXP etaSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        NumericVector eta = Rcpp::as<NumericVector >(etaSEXP);
        NumericVector __result = disclapglm_mu_eta(eta);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// disclapglm_varfunc
NumericVector disclapglm_varfunc(NumericVector mu);
RcppExport SEXP disclapmix_disclapglm_varfunc(SEXP muSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        NumericVector mu = Rcpp::as<NumericVector >(muSEXP);
        NumericVector __result = disclapglm_varfunc(mu);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// disclapglm_loglikeh
double disclapglm_loglikeh(double mu, double y);
RcppExport SEXP disclapmix_disclapglm_loglikeh(SEXP muSEXP, SEXP ySEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        double mu = Rcpp::as<double >(muSEXP);
        double y = Rcpp::as<double >(ySEXP);
        double __result = disclapglm_loglikeh(mu, y);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// disclapglm_deviance
double disclapglm_deviance(NumericVector y, NumericVector mu, NumericVector wt);
RcppExport SEXP disclapmix_disclapglm_deviance(SEXP ySEXP, SEXP muSEXP, SEXP wtSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        NumericVector y = Rcpp::as<NumericVector >(ySEXP);
        NumericVector mu = Rcpp::as<NumericVector >(muSEXP);
        NumericVector wt = Rcpp::as<NumericVector >(wtSEXP);
        double __result = disclapglm_deviance(y, mu, wt);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// rcpp_create_design_matrix
IntegerMatrix rcpp_create_design_matrix(IntegerMatrix x, int clusters);
RcppExport SEXP disclapmix_rcpp_create_design_matrix(SEXP xSEXP, SEXP clustersSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        IntegerMatrix x = Rcpp::as<IntegerMatrix >(xSEXP);
        int clusters = Rcpp::as<int >(clustersSEXP);
        IntegerMatrix __result = rcpp_create_design_matrix(x, clusters);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// rcpp_create_new_weight_vector
NumericVector rcpp_create_new_weight_vector(NumericMatrix vic, int loci);
RcppExport SEXP disclapmix_rcpp_create_new_weight_vector(SEXP vicSEXP, SEXP lociSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        NumericMatrix vic = Rcpp::as<NumericMatrix >(vicSEXP);
        int loci = Rcpp::as<int >(lociSEXP);
        NumericVector __result = rcpp_create_new_weight_vector(vic, loci);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// rcpp_create_response_vector
IntegerVector rcpp_create_response_vector(IntegerMatrix x, IntegerMatrix y);
RcppExport SEXP disclapmix_rcpp_create_response_vector(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        IntegerMatrix x = Rcpp::as<IntegerMatrix >(xSEXP);
        IntegerMatrix y = Rcpp::as<IntegerMatrix >(ySEXP);
        IntegerVector __result = rcpp_create_response_vector(x, y);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// rcpp_calculate_wic
NumericMatrix rcpp_calculate_wic(IntegerMatrix x, IntegerMatrix y, NumericMatrix p, NumericVector tau);
RcppExport SEXP disclapmix_rcpp_calculate_wic(SEXP xSEXP, SEXP ySEXP, SEXP pSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        IntegerMatrix x = Rcpp::as<IntegerMatrix >(xSEXP);
        IntegerMatrix y = Rcpp::as<IntegerMatrix >(ySEXP);
        NumericMatrix p = Rcpp::as<NumericMatrix >(pSEXP);
        NumericVector tau = Rcpp::as<NumericVector >(tauSEXP);
        NumericMatrix __result = rcpp_calculate_wic(x, y, p, tau);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// rcpp_calculate_vic
NumericMatrix rcpp_calculate_vic(NumericMatrix wic);
RcppExport SEXP disclapmix_rcpp_calculate_vic(SEXP wicSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        NumericMatrix wic = Rcpp::as<NumericMatrix >(wicSEXP);
        NumericMatrix __result = rcpp_calculate_vic(wic);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// rcpp_calculate_haplotype_probabilities
NumericVector rcpp_calculate_haplotype_probabilities(IntegerMatrix new_data, IntegerMatrix y, NumericMatrix p, NumericVector tau);
RcppExport SEXP disclapmix_rcpp_calculate_haplotype_probabilities(SEXP new_dataSEXP, SEXP ySEXP, SEXP pSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        IntegerMatrix new_data = Rcpp::as<IntegerMatrix >(new_dataSEXP);
        IntegerMatrix y = Rcpp::as<IntegerMatrix >(ySEXP);
        NumericMatrix p = Rcpp::as<NumericMatrix >(pSEXP);
        NumericVector tau = Rcpp::as<NumericVector >(tauSEXP);
        NumericVector __result = rcpp_calculate_haplotype_probabilities(new_data, y, p, tau);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
